% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edit_family_events.R
\name{add_family_event}
\alias{add_family_event}
\alias{add_family_event_annulment}
\alias{add_family_event_census}
\alias{add_family_event_divorce}
\alias{add_family_event_divorce_filed}
\alias{add_family_event_engagement}
\alias{add_family_event_marriage_banns}
\alias{add_family_event_marriage_contract}
\alias{add_family_event_marriage}
\alias{add_family_event_marriage_license}
\alias{add_family_event_marriage_settlement}
\alias{add_family_event_residence}
\alias{add_family_event_other}
\title{Add a family event to a family group record}
\usage{
add_family_event(
  gedcom,
  event_type = character(),
  event_descriptor = character(),
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_annulment(
  gedcom,
  event_type = "ANUL",
  event_descriptor = "",
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_census(
  gedcom,
  event_type = "CENS",
  event_descriptor = "",
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_divorce(
  gedcom,
  event_type = "DIV",
  event_descriptor = "",
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_divorce_filed(
  gedcom,
  event_type = "DIVF",
  event_descriptor = "",
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_engagement(
  gedcom,
  event_type = "ENGA",
  event_descriptor = "",
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_marriage_banns(
  gedcom,
  event_type = "MARB",
  event_descriptor = "",
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_marriage_contract(
  gedcom,
  event_type = "MARC",
  event_descriptor = "",
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_marriage(
  gedcom,
  event_type = "MARR",
  event_descriptor = "",
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_marriage_license(
  gedcom,
  event_type = "MARL",
  event_descriptor = "",
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_marriage_settlement(
  gedcom,
  event_type = "MARS",
  event_descriptor = "",
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_residence(
  gedcom,
  event_type = "RESI",
  event_descriptor = "",
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)

add_family_event_other(
  gedcom,
  event_type = "EVEN",
  event_descriptor = character(),
  event_classification = character(),
  husband_age_at_event = character(),
  wife_age_at_event = character(),
  event_notes = character(),
  event_date = date_value(),
  event_cause = character(),
  place_name = character(),
  place_phonetic_variation = character(),
  phonetisation_method = character(),
  place_romanised_variation = character(),
  romanisation_method = character(),
  place_latitude = character(),
  place_longitude = character(),
  place_notes = character(),
  local_address_lines = character(),
  city = character(),
  state = character(),
  postal_code = character(),
  country = character(),
  phone_number = character(),
  email = character(),
  fax = character(),
  web_page = character(),
  responsible_agency = character(),
  religious_affiliation = character(),
  multimedia_links = character()
)
}
\arguments{
\item{gedcom}{A tidygedcom object.}

\item{event_type}{The type of event. This should be automatically populated with the appropriate
event function.}

\item{event_descriptor}{A short description of the event.}

\item{event_classification}{A descriptive word or phrase used to further classify this
event. This should be used whenever the 'other' event is used (but can also be used
with others).}

\item{husband_age_at_event}{A character string that indicates the age in years, months, and days
that the husband was at the time of the event. Any combination of these is permitted.
Any labels must come after their corresponding number, for example; "4y 8m 10d".}

\item{wife_age_at_event}{A character string that indicates the age in years, months, and days
that the wife was at the time of the event. Any combination of these is permitted.
Any labels must come after their corresponding number, for example; "4y 8m 10d".}

\item{event_notes}{A character vector of notes accompanying the event.
These could be xrefs to existing Note records.}

\item{event_date}{A date_value() object giving the date of the event.}

\item{event_cause}{Used in special cases to record the reasons which precipitated an event.
Normally this will be used for a death event to show cause of death, such as might be listed
on a death certificate.}

\item{place_name}{The jurisdictional name of the place where the event took place.
Jurisdictions are separated by commas, for example, "Cove, Cache, Utah, USA."}

\item{place_phonetic_variation}{A character vector of phonetic variations of the place name.}

\item{phonetisation_method}{A character vector giving the method used in transforming the text to
the corresponding phonetic variation. If this argument is used, it must be the same size
as the place_phonetic_variation argument.}

\item{place_romanised_variation}{A character vector of romanized variations of the place name.}

\item{romanisation_method}{A character vector giving the method used in transforming the text to
the corresponding romanized variation. If this argument is used, it must be the same size
as the place_romanized_variation argument.}

\item{place_latitude}{The value specifying the latitudinal coordinate of the event place.
The latitude coordinate is the direction North or South from the equator in degrees and
fraction of degrees carried out to give the desired accuracy.
For example: 18 degrees, 9 minutes, and 3.4 seconds North would be formatted as "N18.150944"}

\item{place_longitude}{The value specifying the longitudinal coordinate of the event place.
The longitude coordinate is Degrees and fraction of degrees east or west of the zero or
base meridian coordinate. For example:
168 degrees, 9 minutes, and 3.4 seconds East would be formatted as "E168.150944".}

\item{place_notes}{A character vector of notes accompanying the event place.
These could be xrefs to existing Note records.}

\item{local_address_lines}{The first line of the event address.}

\item{city}{The city of the event address.}

\item{state}{The state/county of the event address.}

\item{postal_code}{The postal code of the event address.}

\item{country}{The country of the event address.}

\item{phone_number}{A character vector containing up to three phone numbers of the event address.}

\item{email}{A character vector containing up to three email addresses of the event address.}

\item{fax}{A character vector containing up to three fax numbers of the event address.}

\item{web_page}{A character vector containing up to three web pages of the event address.}

\item{responsible_agency}{The organisation, institution, corporation, person, or other
entity that has responsibility for the event data.}

\item{religious_affiliation}{A name of the religion with which this event was affiliated.}

\item{multimedia_links}{A character vector of multimedia file references accompanying this
event. These could be xrefs to existing Multimedia records.}
}
\value{
An updated tidygedcom object with an expanded Family group record including
this event.
}
\description{
Add a family event to a family group record
}
